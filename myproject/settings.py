"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import pymysql
from dotenv import load_dotenv # (Variante 1 - Umgebungsvariablen)
import environ # (Variante 2 - Umgebungsvariablen)
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# L채dt die Variablen aus der .env-Datei in die Umgebung (Variante 1 - Umgebungsvariablen)
load_dotenv()

# Initialisiere environ (Variante 2 - Umgebungsvariablen)
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Lese die .env-Datei (BASE_DIR muss korrekt definiert sein)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
# (Variante 1 - Umgebungsvariablen)
#SECRET_KEY = os.environ.get('SECRET_KEY') 

# (Variante 2 - Umgebungsvariablen)
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# (Variante 1 - Umgebungsvariablen)
#DEBUG = os.environ.get('DEBUG') == 'True'

# (Variante 2 - Umgebungsvariablen)
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # My Custom Apps
    'accounts',
    'myapp',
    'weather',
    'home',
    'polls',
    'relations',
    'newyear',
    'wednesday',
    'forms',
    'nerd_forms',
    'exo_planet',
    'retro_games',
    
    # Django Default Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

#-----------------------
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
#-----------------------

# Default SQLite3 Database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# MySQL Database Settings
pymysql.install_as_MySQLdb()

# Unsicher Variante, da Daten sichtbar im Code stehen
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'django_june_25_db',
#         'USER': 'django_june_25_user',
#         'PASSWORD': 'user_password_sehr_sicher',
#         'HOST': '127.0.0.1',
#         'PORT': '3307',
#     }
# }

# Bessere Variante mit Umgebungsvariablen
#------------------------------------------
# Variante 1 (allgemein f체r Python)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'HOST': os.environ.get('DB_HOST'),
#         'PORT': os.environ.get('DB_PORT'),
#     }
# }

# Variante 2 (speziell f체r Django)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': env('DB_NAME'),
#         'USER': env('DB_USER'),
#         'PASSWORD': env('DB_PASSWORD'),
#         'HOST': env('DB_HOST'),
#         'PORT': env('DB_PORT'),
#     }
# }

# Variante 2 sogar noch besser 
# Die Datenbank-URL wird automatisch in die korrekte Dictionary-Struktur geparst
DATABASES = {
    'default': env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# For App Level
STATIC_URL = 'static/'

# Global Static Folder
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Optional: Konfiguration f체r das Deployment
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Mediafiles settings
# Physical place of the media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 'Fake' URL of the Media
MEDIA_URL = '/gummischuh/'


